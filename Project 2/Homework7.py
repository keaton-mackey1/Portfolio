# -*- coding: utf-8 -*-
"""Homework 7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z-TKRJ6xaZna4kyb3IypTWMr37srppb3
"""

#Keaton Mackey
#82195376


import unittest
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
import seaborn as sns
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import Lasso


path = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRr9evtYQFBBPcyxE_zy_ixp8QVaDwkSIHddTRJ1j7FRI9kb5zYj3wMYIQVVt0ZYA/pub?output=xlsx'

def excelToDataframe(path):
  """This function will make the excel that is read in to a pandas dataframe"""
  newDataFrame = pd.read_excel(path) #make it into Panda Datafrane
  return newDataFrame

def showHistogram(dataFrame):
  """This function will show the histograms if called, but I didn't use them as much as expected"""
  dataFrame.hist(bins = 50, figsize = (10,10)) #make histogram just for visual purposes (will not be used later)
  plt.show()
  return 


def seabornCorr(dataFrame):
  """This function will make a heat map with the strength of variable correlations"""
  sns.heatmap(dataFrame.corr(),annot=True) #make heat map to show some correlations with raw data
  return 


def runRegularization(dataFrame):
  """This function will run a regularization program (lasso) to show which 
  variables are significantly correlated to the death outcomes. It does this by 
  training a test set and train set and then running the Lasso regularization 
  against these values to see which has non zero values. """
  X = dataFrame[['age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']]
  y = dataFrame['DEATH_EVENT']
  xTrain, xTest, yTrain, yTest = train_test_split(X,y, test_size = 0.25, random_state = np.random.randint(0,100)) #make train data 
  lassoreg=Lasso(alpha=1) #fit correctly
  lassoreg.fit(xTrain,yTrain)
  meanSqVal = np.sqrt(mean_squared_error(yTest,lassoreg.predict(xTest))) #look at mean sq val and lass ref correlation values -- small correlation will reduce to zero
  return lassoreg.coef_


def makeList(lassoRegs, dataFrame):
  """This function will create a list coupled with the correlation value and the name of the variables"""
  colNames = dataFrame.columns
  lassoRegList = []
  for item in range(0, (len(lassoRegs)-1)): #put them into tuple format with name of variable
    makeTuple = tuple((colNames[item], lassoRegs[item]))
    lassoRegList.append(makeTuple)
  return lassoRegList



def isItSignificant(lassoRegsListed, dataFrame):
  """This function will create a list coupled with the correlation value and the name of the variables only if they include non zero values. 
  Thus this will be the significant correlations."""
  significantFactorsList = [] #if it doesn't equal zero, will be deemed significant correlation value
  for item in range(0, len(lassoRegsListed)):
    correlationValue = lassoRegsListed[item][1] #add to it
    if correlationValue != 0:
      significantFactorsList.append((lassoRegsListed[item])) #add to list
  return significantFactorsList

def main():
  """This function puts all the functions together and return the significant correlation variables and the heatmap previously shown."""
  dataFrame = excelToDataframe(path)
  makeHeatmap = seabornCorr(dataFrame)
  lassoRegs = runRegularization(dataFrame)
  lassoRegsListed = makeList(lassoRegs, dataFrame)
  sigFactorsList = isItSignificant(lassoRegsListed, dataFrame)
  return sigFactorsList #spit out